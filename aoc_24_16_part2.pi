% https://adventofcode.com/2024/day/16, part-2
% use the cost 94444 obtained from part-1 as the upper bound

main([File]) =>
    Ls = read_file_lines(File),
    M = {to_array(L) : L in Ls, L=['#'|_]},
    NRows = len(M),
    NCols = len(M[1]),
    between(2,NRows,Rs),
    between(2,NCols,Cs),
    M[Rs,Cs] == 'S',
    between(2,NRows,Re),
    between(2,NCols,Ce),
    M[Re,Ce] == 'E',
    !,
    Dr = 0, Dc = 1,   % east
    Count = 2,
    foreach (R in 2..NRows-1, C in 2..NCols-1, (R,C) != (Rs,Cs), (R,C) != (Re,Ce), M[R,C] !== '#')
        if best_path([Dr,Dc,Rs,Cs,M,R,C,Re,Ce],_) then
            Count := Count+1
        end
    end,
    println(Count).

% state [Dr,Dc,R,C,M,Rv,Cv,Re,Ce]
% find a shortest path from (R,C) to (Re,Ce) through via point (Rv,Cv).
table (+,min)
best_path([Dr,Dc,R,C,M,R,C],Cost) => Cost = 0.          % via point eliminated, goal reached
best_path([Dr,Dc,R,C,M,R,C|T],Cost) =>                  % via point reached
    best_path([Dr,Dc,R,C,M|T],Cost).
best_path([Dr,Dc|T],Cost) ?=>                           % rotate
    turn(Dr,Dc,Dr1,Dc1),
    best_path([Dr1,Dc1|T],Cost1),
    Cost = Cost1+1000,
    Cost =< 94444.
best_path([Dr,Dc,R,C,M|T],Cost) =>                     % move
    R1 = R+Dr,
    C1 = C+Dc,
    M[R1,C1] != '#',
    best_path([Dr,Dc,R1,C1,M|T],Cost1),
    Cost = Cost1+1,
    Cost =< 94444.    

% rotate 
index (+,+,-,-)
turn(-1,0,0,1).
turn(-1,0,0,-1).
turn(0,1,1,0).
turn(0,1,-1,0).
turn(1,0,0,1).
turn(1,0,0,-1).
turn(0,-1,1,0).
turn(0,-1,-1,0).

