% https://adventofcode.com/2024/day/12, part-2

main([File]) =>
    Ls = read_file_lines(File),
    M = {to_array(L) : L in Ls},
    NRows = len(M),
    NCols = len(M[1]),
    MaskM = new_array(NRows,NCols),
    comp_cost_regions(M,NRows,NCols,MaskM,0,Cost),
    println(Cost).

comp_cost_regions(M,NRows,NCols,MaskM,Cost0,Cost),
    between(1,NRows,R0),
    between(1,NCols,C0),
    var(MaskM[R0,C0])
=>    
    measure_region([(R0,C0)],M,NRows,NCols,MaskM,0,Area,0,NSides),
    Cost1 is Cost0+Area*NSides,
    comp_cost_regions(M,NRows,NCols,MaskM,Cost1,Cost).
comp_cost_regions(M,NRows,NCols,MaskM,Cost0,Cost) => Cost = Cost0.

measure_region([],M,NRows,NCols,MaskM,Area0,Area,NSides0,NSides) =>
    Area = Area0,
    NSides = NSides0.
measure_region([(R,C)|L],M,NRows,NCols,MaskM,Area0,Area,NSides0,NSides), var(MaskM[R,C]) =>
    MaskM[R,C] = 1,    % mark it
    PeriU = cond((R==1 || M[R-1,C] != M[R,C]), 1, 0),
    PeriD = cond((R==NRows || M[R+1,C] != M[R,C]), 1, 0),
    PeriL = cond((C==1 || M[R,C-1] != M[R,C]), 1, 0),
    PeriR = cond((C==NCols || M[R,C+1] != M[R,C]), 1, 0),
    ThisPeri = PeriU + PeriD + PeriL + PeriR,
    Neibs = [(R1,C1) : (R1,C1) in [(R-1,C),(R+1,C),(R,C-1),(R,C+1)],
                       R1 >= 1, R1 =< NRows, C1 >= 1, C1 =< NCols],
    CountU = cond(shared_u(R,C,M,NRows,NCols,MaskM), 0, PeriU),
    CountD = cond(shared_d(R,C,M,NRows,NCols,MaskM), 0, PeriD),
    CountL = cond(shared_l(R,C,M,NRows,NCols,MaskM), 0, PeriL),
    CountR = cond(shared_r(R,C,M,NRows,NCols,MaskM), 0, PeriR),
    ThisNSides = CountU+CountD+CountL+CountR,
    Unmeasured = sort_remove_dups([(R1,C1) : (R1,C1) in Neibs, var(MaskM[R1,C1]), M[R1,C1] == M[R,C]] ++ L),
    measure_region(Unmeasured,M,NRows,NCols,MaskM, Area0+1, Area, NSides0+ThisNSides, NSides).

% note cells of the same region are always measured from left to right and from top to down.
shared_u(R,C,M,NRows,NCols,MaskM), R == 1, C1 = C-1, C1 >= 1, M[R,C] == M[R,C1] => true.
shared_u(R,C,M,NRows,NCols,MaskM), R > 1, C1 = C-1, C1 >= 1, M[R,C] == M[R,C1], M[R,C1] != M[R-1,C1] => true.

shared_d(R,C,M,NRows,NCols,MaskM), R == NRows, C1 = C-1, C1 >= 1, M[R,C] == M[R,C1] => true.
shared_d(R,C,M,NRows,NCols,MaskM), R < NRows, C1 = C-1, C1 >= 1, M[R,C] == M[R,C1], M[R,C1] != M[R+1,C1] => true.

shared_l(R,C,M,NRows,NCols,MaskM), C == 1, R1 = R-1, R1 >= 1, M[R,C] == M[R1,C] => true.
shared_l(R,C,M,NRows,NCols,MaskM), C > 1, R1 = R-1, R1 >= 1, M[R,C] == M[R1,C], M[R1,C] != M[R1,C-1] => true.

shared_r(R,C,M,NRows,NCols,MaskM), C == NCols, R1 = R-1, R1 >= 1, M[R,C] == M[R1,C] => true.
shared_r(R,C,M,NRows,NCols,MaskM), C < NCols, R1 = R-1, R1 >= 1, M[R,C] == M[R1,C], M[R1,C] != M[R1,C+1] => true.
