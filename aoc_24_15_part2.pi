% https://adventofcode.com/2024/day/15, part-2

main([File]) =>
    Ls = read_file_lines(File),
    M = {to_array(change(L)) : L in Ls, L=['#'|_]},
    NRows = len(M),
    NCols = len(M[1]),
    Steps = [L : L in Ls, L=[Ch|_], Ch != '#', Ch != ' '],
%    output_grid(M),
    between(2,NRows,R0),
    between(2,NCols,C0),
    M[R0,C0] == '@',!,
    exec(R0,C0,M,Steps,_,_),
    GPS = 0,
    foreach (R in 2..NRows-1, C in 3..NCols-2)
        if M[R,C] == '[' then
           GPS := GPS + (R-1)*100+(C-1)
        end
    end,
    println(GPS).

change([]) = [].
change(['#'|L]) = ['#','#'|change(L)].
change(['O'|L]) = ['[',']'|change(L)].
change(['.'|L]) = ['.','.'|change(L)].
change(['@'|L]) = ['@','.'|change(L)].

exec(R0,C0,M,[],R,C) => R = R0, C = C0.
exec(R0,C0,M,[D|Ds],R,C) =>
    exec(R0,C0,M,D,R1,C1),
    exec(R1,C1,M,Ds,R,C).
exec(R0,C0,M,'>',R,C) =>
%    println('>'),
    exec(R0,C0,M,0,1,R,C).
exec(R0,C0,M,'<',R,C) =>
%    println('<'),
    exec(R0,C0,M,0,-1,R,C).
exec(R0,C0,M,'^',R,C) =>
%    println('^'),
    exec(R0,C0,M,-1,0,R,C).
exec(R0,C0,M,'v',R,C) =>
%    println('v'),
    exec(R0,C0,M,1,0,R,C).

exec(R0,C0,M,Dr,Dc,R,C) =>
    R1 = R0+Dr,
    C1 = C0+Dc,
    move_robot(R0,C0,R1,C1,M,Dr,Dc,R,C).
%    output_grid(M).

move_robot(R0,C0,R1,C1,M,Dr,Dc,R,C), M[R1,C1] == '[' =>
    if movable(R1,C1,M,Dr,Dc) then
        move_box(R1,C1,M,Dr,Dc),
        M[R0,C0] := '.',
        M[R1,C1] := '@',
        R = R1, C = C1
    else
        R = R0, C = C0
    end.
move_robot(R0,C0,R1,C1,M,Dr,Dc,R,C), M[R1,C1] == ']' =>
    if movable(R1,C1-1,M,Dr,Dc) then
        move_box(R1,C1-1,M,Dr,Dc),
        M[R0,C0] := '.',
        M[R1,C1] := '@',
        R = R1, C = C1
    else
        R = R0, C = C0
    end.
move_robot(R0,C0,R1,C1,M,Dr,Dc,R,C), M[R1,C1] == '#' =>
    R = R0, C = C0.    
move_robot(R0,C0,R1,C1,M,Dr,Dc,R,C) =>
    M[R0,C0] := '.',
    M[R1,C1] := '@',
    R = R1, C = C1.

% there is a box [] at (R,C) and (R,C+1)
movable(R,C,M,Dr,Dc), Dr == 0, Dc == -1 =>   % left
    M[R,C-1] != '#',
    if M[R,C-1] == ']' then 
        movable(R,C-2,M,Dr,Dc)
    end.
movable(R,C,M,Dr,Dc), Dr == 0, Dc == 1 =>   % right
    M[R,C+2] != '#',
    if M[R,C+2] == '[' then 
        movable(R,C+2,M,Dr,Dc)
    end.
movable(R,C,M,Dr,Dc), Dc == 0 =>  % up or down
    M[R+Dr,C] != '#',
    M[R+Dr,C+1] != '#',
    if M[R+Dr,C] == '[' then
        movable(R+Dr,C,M,Dr,Dc)
    end,
    if M[R+Dr,C] == ']' then
        movable(R+Dr,C-1,M,Dr,Dc)
    end,
    if M[R+Dr,C+1] == '[' then
        movable(R+Dr,C+1,M,Dr,Dc)
    end.

move_box(R,C,M,Dr,Dc), Dr == 0, Dc == -1 =>   % left
    if M[R,C-1] == ']' then 
        move_box(R,C-2,M,Dr,Dc)
    end,
    M[R,C-1] := '[',
    M[R,C] := ']'.
move_box(R,C,M,Dr,Dc), Dr == 0, Dc == 1 =>   % right
    if M[R,C+2] == '[' then 
        move_box(R,C+2,M,Dr,Dc)
    end,
    M[R,C+1] := '[',
    M[R,C+2] := ']'.
move_box(R,C,M,Dr,Dc), Dc == 0 =>  % up or down
    if M[R+Dr,C] == '[' then
        move_box(R+Dr,C,M,Dr,Dc)
    end,
    if M[R+Dr,C] == ']' then
        move_box(R+Dr,C-1,M,Dr,Dc)
    end,
    if M[R+Dr,C+1] == '[' then
        move_box(R+Dr,C+1,M,Dr,Dc)
    end,
    M[R+Dr,C] := '[',
    M[R+Dr,C+1] := ']',
    M[R,C] := '.',
    M[R,C+1] := '.'.

output_grid(M) =>
    NRows = len(M),
    NCols = len(M[1]),
    foreach (R in 1..NRows)
        foreach (C in 1..NCols)
            print(M[R,C])
        end,
        nl
    end.

    
